mapLayout = [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1],
    [1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1],
    [1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1],
    [1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1],
    [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1],
    [1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1],
    [1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
];

class TestEdgeDetection extends TestBase
{
    setUp()
    {
        checked = Array(50);
        for(var x = 0; x < 50; x++)
            checked[x] = Array(50);
    }

    testPossibleDirections()
    {
        getPossibleDirections(0,0)
        this.assertTrue(s);
        this.assertTrue(e);
        this.assertFalse(n);
        this.assertFalse(w);

        getPossibleDirections(49,49)
        this.assertFalse(s);
        this.assertFalse(e);
        this.assertTrue(n);
        this.assertTrue(w);

        getPossibleDirections(25,25)
        this.assertTrue(s);
        this.assertTrue(e);
        this.assertTrue(n);
        this.assertTrue(w);
    }

    testWallAt()
    {
        /*
            y:4-9 , x: 8-11
            Table is inverted to make logical order when accessing tables
            ie. table[x][y] instead of table[y][x]

            0,0,1,1,1,1,
            0,0,1,1,1,1,
            0,1,1,1,0,0,
            0,1,1,1,1,0,

            x: 8-11, y:4-9: turned around - more readable: x goes right, y goes down

            0,0,0,0,
            0,0,1,1,
            1,1,1,1,
            1,1,1,1,
            1,1,0,1,
            1,1,0,0,
        */

        /* Test that we are using correct map part */
        this.assertTrue(mapLayout[8][6]);
        this.assertFalse(mapLayout[9][5]);
        this.assertTrue(mapLayout[9][6]);
        this.assertTrue(mapLayout[10][5]);

        /* Test wall check function */

        // NE
        this.assertFalse(checkWallAt(mapLayout, 8, 6, "ne")[0]);
        this.assertTrue(checkWallAt(mapLayout, 9, 6, "ne")[0]);
        checked[9][5] = false;
        checked[10][5] = false;

        // NW
        this.assertFalse(checkWallAt(mapLayout, 10, 6, "nw")[0]);
        this.assertTrue(checkWallAt(mapLayout, 11, 6, "nw")[0]);
        checked[9][5] = false;
        checked[10][5] = false;

        // SE
        this.assertFalse(checkWallAt(mapLayout, 9, 4, "se")[0]);
        this.assertTrue(checkWallAt(mapLayout, 9, 5, "se")[0]);
        checked[9][5] = false;
        checked[10][5] = false;

        // SW
        this.assertFalse(checkWallAt(mapLayout, 10, 4, "sw")[0]);
        this.assertTrue(checkWallAt(mapLayout, 11, 4, "sw")[0]);
        checked[9][5] = false;
        checked[10][5] = false;
    }

    testNextEdgePart()
    {
        /*
            y:4-10 , x: 6-13
            Table is inverted to make logical order when accessing tables
            ie. table[x][y] instead of table[y][x]

            0,0,0,0,1,1,1,
            0,0,1,1,1,1,1,
            0,0,1,1,1,1,1,
            0,0,1,1,1,1,1,
            0,1,1,1,0,0,0,
            0,1,1,1,1,0,0,
            0,1,1,1,1,0,0,
            0,1,1,1,1,0,0,

            x: 6-13, y:4-10: turned around - more readable: x goes right, y goes down

            0,0,0,0,0,0,0,0,
            0,0,0,0,1,1,1,1,
            0,1,1,1,1,1,1,1,
            0,1,1,1,1,1,1,1,
            1,1,1,1,0,1,1,1,
            1,1,1,1,0,0,0,0,
            1,1,1,1,0,0,0,0,
        */
        currentEdges = [[1,1]];

        var next = getNextEdgePart(mapLayout, 10, 5);
        this.assertTrue(!!next);
        next.push(lastDir);
        this.assertEqual(next, [9, 6, 'sw']);

        next = getNextEdgePart(mapLayout, next[0], next[1]);
        next.push(lastDir);
        this.assertEqual(next, [8, 6, 'w']);

        next = getNextEdgePart(mapLayout, next[0], next[1]);
        next.push(lastDir);
        this.assertEqual(next, [7, 6, 'w']);

        next = getNextEdgePart(mapLayout, next[0], next[1]);
        next.push(lastDir);
        this.assertEqual(next, [7, 7, 's']);
    }

    testWallSurroundings()
    {
        /*
            y:4-10 , x: 6-13
            Table is inverted to make logical order when accessing tables
            ie. table[x][y] instead of table[y][x]

            0,0,0,0,1,1,1,
            0,0,1,1,1,1,1,
            0,0,1,1,1,1,1,
            0,0,1,1,1,1,1,
            0,1,1,1,0,0,0,
            0,1,1,1,1,0,0,
            0,1,1,1,1,0,0,
            0,1,1,1,1,0,0,

            x: 6-13, y:4-10: turned around - more readable: x goes right, y goes down

            0,0,0,0,0,0,0,0,
            0,0,0,0,1,1,1,1,
            0,1,1,1,1,1,1,1,
            0,1,1,1,1,1,1,1,
            1,1,1,1,0,1,1,1,
            1,1,1,1,0,0,0,0,
            1,1,1,1,0,0,0,0,
        */

        var isEdge = checkWallSurrounding(mapLayout, 9, 8, 'n')
        this.assertTrue(isEdge);

        isEdge = checkWallSurrounding(mapLayout, 9, 8, 's')
        this.assertTrue(isEdge);

        isEdge = checkWallSurrounding(mapLayout, 10, 8, 's')
        this.assertFalse(isEdge);

        isEdge = checkWallSurrounding(mapLayout, 8, 8, 's')
        this.assertFalse(isEdge);
    }

    testGetWallEdges()
    {
        getWallMap = function(){
            return [mapLayout, checked];
        }
        graphics.walls = mapLayout;

        var edges = getWallEdges();
        console.log("edges: ", edges);
        graphics.lines = edges;
    }
}
